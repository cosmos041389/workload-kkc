#! /usr/bin/bash

# Local Variable
dir_container=/root/workload-kkc

# Gloabl Variable
export dir_local=/home/$USER/workload-kkc # Default path
export dir_local_datasets=$dir_local/../datasets/
export dir_local_deps=$dir_local/../deps/
export dir_local_docs=$dir_local/../docs/
export dir_local_evaluation=$dir_local/../evaluation/
export dir_local_scripts=$dir_local/../scripts/
export dir_local_scripts2=$dir_local/../scripts2/
export dir_local_sources=$dir_local/../sources/
export dir_local_temp=$dir_local/../temp/

#############################################################
#############################################################

# Functions

function checkOperatingSystem(){
if [ "$(uname)" == "Darwin" ]; then
  echo "Operating System: Mac OS X"
  dir_local=/Users/$USER/workload-kkc  
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  echo "Operating System: Linux"
elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
  echo "Operating System: Windows NT"
else
  echo "Operating System: Unknown"
fi
}

function checkImage(){
image_name=$1
if docker images | awk '{ print $1 }' | grep -q $image_name; then
  echo "The image '$image_name' exists"
else
  echo "The image '$image_name' does not exist"
  if [ "$image_name" == "centos" ]; then
    docker pull $image_name:centos8.3.2011
    return 0;
  fi
  docker pull $image_name:latest
fi
}

function checkGit(){
# Check if the ".git" directory exists in the current directory
if [ -d ".git" ]; then
  echo "Git repository found in the current directory"
else
  echo "Git repository not found in the current directory"
  exit 1
fi

# Check if the ".gitmodules" file exists in the current directory
if [ -f ".gitmodules" ]; then
  echo "Git submodules file found in the current directory"
else
  echo "Git submodules file not found in the current directory"
  exit 1
fi

# Check if the submodules have been initialized
if [ -f ".git/config" ]; then
  if grep -q "submodule" ".git/config"; then
    echo "Git submodules have been initialized"
  else
    echo "Git submodules have not been initialized"
    git submodule init
  fi
else
  echo "Git config file not found in the current directory"
  exit 1
fi

# Check if the submodules have been updated
if [ -d ".git/modules" ]; then
  echo "Git submodules have been updated"
else
  echo "Git submodules have not been updated"
  git submodule update
fi

# Everything is OK
echo "Git submodules have been initialized and updated successfully"
}

function initBtree(){
  cd $dir_local/sources/mitosis-workload-btree
  make
}

function initHashjoin(){
  cd $dir_local/sources/mitosis-workload-hashjoin
  make
}

function initDriver(){
# Git submodule init & update
dir_current=$(pwd)
cd $dir_local
checkGit
cd $dir_current

#initBtree
#initHashjoin
#cd $dir_current

# Resolve Docker images
checkImage centos
#checkImage bitnami/tensorflow-inception
#checkImage voltdb/voltdb-community
#checkImage apache/spark
checkImage cassandra
#checkImage memcached
#checkImage redis
#checkImage biocontainers/snap-aligner
checkImage alvarobrandon/ycsb

}

function buildDriver(){

# Build Integrated image
docker build -t centos:common $dir_local
}

function runDriver(){

# Run Docker
docker run -it --name instance1 -v /var/run/docker.sock:/var/run/docker.sock:ro --privileged --rm \
-v $dir_local/datasets:$dir_container/datasets:ro \
-v $dir_local/evaluation:$dir_container/evaluation:rw \
-v $dir_local/scripts2:$dir_container/scripts2:rw \
-v $dir_local/sources:$dir_container/sources:ro \
-v $dir_local/conf:$dir_container/conf:ro \
centos:common bash run_${1}2.sh
}

function printUsage(){
	echo "Usage: $0 <init | build | run>"
	echo "init: Resolve docker images, git submodules"
	echo "build: Build Dockerfile in ${dir_local}/docker as a driver of workload"
	echo "run: Launch a docker container instance. In the container, workload script proceeds"
}
function printUsageRun(){
  echo "Usage: $0 run <workload>"
}

function startDriver(){
status=$(systemctl is-active docker)

if [ "$status" == "active" ]; then
  echo "docker service is running"
else
  echo "docker service is not running"
  sudo systemctl start docker
fi
}

#############################################################
#############################################################

# Execution

checkOperatingSystem

case $1 in
init)
  startDriver;
	initDriver;
	;;
build)
  startDriver;
	buildDriver;
	;;
run)	
  if [ "$#" -eq 1 ]; then
    printUsageRun
  else
    startDriver
    runDriver $2
  fi
  ;;
*)
	printUsage;
	;;
esac
