#! /bin/bash

# Variable

# Local variable

##################################################################
##################################################################

# Functions

function checkInstalled(){
  path_csv=$dir_local_sources/installed_local.csv
  cat "$path_csv" | cut -d',' -f 1- | tr ',' '\t' | column -t
}

function checkOperatingSystem(){
if [ "$(uname)" == "Darwin" ]; then
  echo "Operating System: Mac OS X"
  export dir_local=/Users/$USER/workload-kkc
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  echo "Operating System: Linux"
elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
  echo "Operating System: Windows NT"
else
  echo "Operating System: Unknown"
fi
}

function checkGit(){
# Check if the ".git" directory exists in the current directory
if [ -d ".git" ]; then
  echo "Git repository found in the current directory"
else
  echo "Git repository not found in the current directory"
  exit 1
fi

# Check if the ".gitmodules" file exists in the current directory
if [ -f ".gitmodules" ]; then
  echo "Git submodules file found in the current directory"
else
  echo "Git submodules file not found in the current directory"
  exit 1
fi

# Check if the submodules have been initialized
if [ -f ".git/config" ]; then
  if grep -q "submodule" ".git/config"; then
    echo "Git submodules have been initialized"
  else
    echo "Git submodules have not been initialized"
    git submodule init
  fi
else
  echo "Git config file not found in the current directory"
  exit 1
fi

# Check if the submodules have been updated
if [ -d ".git/modules" ]; then
  echo "Git submodules have been updated"
else
  echo "Git submodules have not been updated"
  git submodule update
fi

# Everything is OK
echo "Git submodules have been initialized and updated successfully"
}

function checkDnf(){
local package_list=("$@")

for package in "${package_list[@]}"; do
  if dnf list installed "$1" &> /dev/null ; then
    echo "$package is installed."
    continue;
  else
    echo "$package is not installed on dnf."
    if dnf list "$package" &> /dev/null; then
      dnf install "$package"
      continue;
    else
     echo "$package not found in the repositories, skipping installation."
    fi
  fi

  if yum list installed "$1" &> /dev/null ; then
    echo "$package is installed."
    continue;
  else
    echo "$package is not installed on yum."
    if yum list "$package" &> /dev/null; then
      yum install "$package"
      continue;
    else
     echo "$package not found in the repositories, skipping installation."
    fi
  fi
done
}

function checkSource(){
  bash ${dir_local_scripts}/download
}

function setSymbolicLink(){
# YCSB
ln -s $dir_local/sources/ycsb-0.17.0/workloads $dir_local/datasets/ycsb_datasets.lnk

# Spark
ln -s $dir_local/sources/spark-3.3.2-bin-hadoop3/data/mllib ${dir_local_datasets}/spark_datasets.lnk
echo "Links to datasets are set."

# GraphX
ln -s $dir_local/sources/spark-3.3.2-bin-hadoop3/data/graphx ${dir_local_datasets}/graphx_datasets.lnk
}

function initFromDriver(){
cd $dir_local

# Resolve dependencies and sources
checkGit # Quicksort
checkDnf memcached libmemcached # Memcached
checkDnf java-1.8.0-openjdk-devel ant gcc gcc-c++ python2 python3 valgrind ccache cmake bzip2 # VoltDB
checkSource # All binaries

# Set link to datasets
setSymbolicLink
}

##################################################################
##################################################################

# Execution
initFromDriver;
